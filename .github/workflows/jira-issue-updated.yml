name: Update issue from Jira

on:
  repository_dispatch:
    types: [jira-issue-updated]

permissions:
  contents: read
  issues: write

jobs:
  update-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Render and patch existing issue
        uses: actions/github-script@v7
        with:
          script: |
            const p = context.payload.client_payload || {};
            const esc = (s) => (s ?? '').toString();
            const nz  = (s, f='') => { const v = esc(s).trim(); return v ? v : f; };
            const decodeMaybe = (s) => {
              const str = esc(s);
              try { return /%[0-9A-Fa-f]{2}/.test(str) ? decodeURIComponent(str) : str; }
              catch { return str; }
            };

            // 0) 필수 값 확인
            let number = Number(p.issue_number);
            if (!number) {
              core.setFailed('Missing issue_number in payload');
              return;
            }

            // 1) kind 정규화 (story/bug/task)
            const rawKind = esc(p.kind).toLowerCase();
            let kind = 'task';
            if (rawKind.startsWith('story')) kind = 'story';
            else if (rawKind.startsWith('bug')) kind = 'bug';

            // 2) 본문 재구성 (템플릿 없이 Markdown 조립) + 체크리스트 삽입
            const checklist = decodeMaybe(p.checklist);
            const bodyLines = [
              '## 📄 이슈 개요 (Description)',
              esc(p.description),
              ''
            ];
            if (checklist) {
              bodyLines.push('---', '', '## ✅ To-Do', checklist, '');
            }
            bodyLines.push(
              '---', '',
              '### 🧑‍💻 생성자',
              esc(p.initiator),
              '',
              '---', '',
              '### 🎯 우선순위',
              esc(p.priority),
              '',
              '---', '',
              '### 📅 기한',
              nz(p.duedate, '미정'),
              '',
              '---', '',
              '### 🔗 Jira Link',
              `[${esc(p.key)}](${esc(p.url)})`
            );
            const body = bodyLines.join('\n');

            // 3) 라벨 동기화 규칙
            const allowed = new Set(['Feature','Refactor','Documentation']);
            let labels = [];
            if (kind === 'story') {
              labels = ['Story'];
            } else if (kind === 'bug') {
              labels = ['Bug'];
            } else {
              let incoming = [];
              if (Array.isArray(p.labels)) {
                incoming = p.labels;
              } else if (typeof p.labels === 'string') {
                try {
                  const parsed = JSON.parse(p.labels);
                  if (Array.isArray(parsed)) incoming = parsed;
                  else incoming = esc(p.labels).split(',').map(s=>s.trim()).filter(Boolean);
                } catch {
                  incoming = esc(p.labels).split(',').map(s=>s.trim()).filter(Boolean);
                }
              }
              const toTitle = s => s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : s;
              labels = incoming.map(toTitle).filter(v => allowed.has(v));
              if (labels.length === 0) labels = ['Task'];
            }

            // 4) 제목 갱신
            const title = `[${esc(p.key)}] ${esc(p.summary)}`;

            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            async function patch(num) {
              await github.rest.issues.update({ owner, repo, issue_number: num, title, body });
              await github.rest.issues.setLabels({ owner, repo, issue_number: num, labels });
            }

            // 4-1) 404 방지용 폴백: 번호가 틀린 경우 검색해서 재시도
            async function searchIssueNumber() {
              // 1) 제목 완전일치
              let q = `repo:${owner}/${repo} is:issue in:title "[${esc(p.key)}] ${esc(p.summary)}"`;
              let r = await github.rest.search.issuesAndPullRequests({ q });
              if (r.data.total_count) return r.data.items[0].number;

              // 2) 본문에 Jira URL 포함
              q = `repo:${owner}/${repo} is:issue in:body "${esc(p.url).replace(/"/g,'\\"')}"`;
              r = await github.rest.search.issuesAndPullRequests({ q });
              if (r.data.total_count) return r.data.items[0].number;

              // 3) 제목에 Jira 키만
              q = `repo:${owner}/${repo} is:issue in:title "${esc(p.key)}"`;
              r = await github.rest.search.issuesAndPullRequests({ q });
              if (r.data.total_count) return r.data.items[0].number;

              return 0;
            }

            try {
              await patch(number);
              core.info(`Patched issue #${number} (kind=${kind}, labels=${JSON.stringify(labels)})`);
            } catch (e) {
              if (e.status === 404) {
                const fallback = await searchIssueNumber();
                if (!fallback) throw e;
                number = fallback;
                await patch(number);
                core.info(`Patched by fallback search → issue #${number}`);
              } else {
                throw e;
              }
            }
