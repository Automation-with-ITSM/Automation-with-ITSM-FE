name: Update issue from Jira

on:
  repository_dispatch:
    types: [jira-issue-updated]

permissions:
  contents: read
  issues: write

jobs:
  update-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Render and patch existing issue
        uses: actions/github-script@v7
        with:
          script: |
            const p = context.payload.client_payload || {};
            const esc = (s) => (s ?? '').toString();
            const nz  = (s, f='') => { const v = esc(s).trim(); return v ? v : f; };

            // 0) 필수 값 확인
            const number = Number(p.issue_number);
            if (!number) {
              core.setFailed('Missing issue_number in payload'); 
              return;
            }

            // 1) kind 정규화 (story/bug/task)
            const rawKind = esc(p.kind).toLowerCase();
            let kind = 'task';
            if (rawKind.startsWith('story')) kind = 'story';
            else if (rawKind.startsWith('bug')) kind = 'bug';

            // 2) 본문 재구성 (템플릿 없이 Markdown 조립)
            const bodyLines = [
              '## 📄 이슈 개요 (Description)',
              esc(p.description),
              '',
              '---',
              '',
              '### 🧑‍💻 생성자',
              esc(p.initiator),
              '',
              '---',
              '',
              '### 🎯 우선순위',
              esc(p.priority),
              '',
              '---',
              '',
              '### 📅 기한',
              nz(p.duedate, '미정'),
              '',
              '---',
              '',
              '### 🔗 Jira Link',
              `[${esc(p.key)}](${esc(p.url)})`
            ];
            const body = bodyLines.join('\n');

            // 3) 라벨 동기화 규칙
            //    - Story: ["Story"]
            //    - Bug:   ["Bug"]
            //    - Task:  Jira labels 중 Feature/Refactor/Documentation만 허용(대소문자 보정)
            const allowed = new Set(['Feature','Refactor','Documentation']);
            let labels = [];
            if (kind === 'story') {
              labels = ['Story'];
            } else if (kind === 'bug') {
              labels = ['Bug'];
            } else {
              let incoming = [];
              if (Array.isArray(p.labels)) incoming = p.labels;
              else if (typeof p.labels === 'string') incoming = p.labels.split(',').map(s=>s.trim()).filter(Boolean);
              const toTitle = s => s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : s;
              labels = incoming.map(toTitle).filter(v => allowed.has(v));
              if (labels.length === 0) labels = ['Task']; // 필요 없으면 제거 가능
            }

            // 4) 제목 갱신
            const title = `[${esc(p.key)}] ${esc(p.summary)}`;

            // 5) GitHub Issue Patch
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: number,
              title,
              body
            });

            // 6) 라벨 덮어쓰기
            await github.rest.issues.setLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: number,
              labels
            });

            core.info(`Patched issue #${number} (kind=${kind}, labels=${JSON.stringify(labels)})`);

      - name: Write back issue number to Jira
        uses: actions/github-script@v7
        env:
          JIRA_BASE: https://automation-itsm.atlassian.net
          JIRA_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          script: |
            const p = context.payload.client_payload || {};
            const key = p.key; // e.g., SCRUM-86
            const number = String((await github.rest.issues.get({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: context.payload.client_payload && context.payload.client_payload._fake ? 0 : 0 // dummy to keep types; we already have number from creation step if needed
            })).data.number) // <- 간단히 설명: 이미 윗 스텝에서 res.data.number를 변수에 담았다면 그 값을 그대로 쓰세요.
      
            // 실제로는 위 create step에서 res.data.number를 outputs로 넘기거나 동일 스텝 내부 변수로 쓰면 됩니다.
            // 여기서는 예시로 number 변수를 확보했다고 가정합니다.
      
            const fetch = require('node-fetch');
            const resp = await fetch(`${process.env.JIRA_BASE_URL}/rest/api/3/issue/${encodeURIComponent(key)}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Basic ' + Buffer.from(`${process.env.JIRA_USER_EMAIL}:${process.env.JIRA_API_TOKEN}`).toString('base64')
              },
              body: JSON.stringify({
                fields: {
                  customfield_gh_number: number
                }
              })
            });
            if (!resp.ok) {
              core.setFailed(`Failed to write GH number to Jira: ${resp.status} ${await resp.text()}`);
            }
