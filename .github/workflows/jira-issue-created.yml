name: Create GitHub Issue from Jira

on:
  repository_dispatch:
    types: [jira-issue]

permissions:
  contents: read
  issues: write

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Render template and create issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const p = context.payload.client_payload || {};
            const kind = (p.kind || '').toLowerCase();

            // 1) 템플릿 선택 (파일명/경로 업데이트)
            const mapping = {
              story: '.github/ISSUE_TEMPLATE/automation-story.md',
              bug: '.github/ISSUE_TEMPLATE/automation-bug.md',
              task: '.github/ISSUE_TEMPLATE/automation-task.md'
            };
            const file = mapping[kind] || mapping.task; // 기본은 task
            const templatePath = path.join(process.cwd(), file);
            if (!fs.existsSync(templatePath)) {
              core.setFailed(`Template not found: ${file}`);
              return;
            }
            const tpl = fs.readFileSync(templatePath, 'utf8');

            // 2) 값 준비 (기본값 포함)
            const esc = (s) => (s ?? '').toString();
            const nz  = (s, fallback='') => {
              const v = (s ?? '').toString().trim();
              return v.length ? v : fallback;
            };

            const key        = esc(p.key);
            const url        = esc(p.url);
            const summary    = esc(p.summary);
            const description= esc(p.description);
            const initiator  = esc(p.initiator);
            const priority   = esc(p.priority);
            const duedate    = nz(p.duedate, '미정');

            // 3) 템플릿 치환 ({{key}} / {{issue.key}} 양쪽 지원)
            let body = tpl
              .replaceAll('{{issue.key}}', key)
              .replaceAll('{{key}}', key)
              .replaceAll('{{issue.url}}', url)
              .replaceAll('{{url}}', url)
              .replaceAll('{{issue.summary}}', summary)
              .replaceAll('{{summary}}', summary)
              .replaceAll('{{description}}', description)
              .replaceAll('{{initiator}}', initiator)
              .replaceAll('{{priority}}', priority)
              .replaceAll('{{issue.duedate}}', duedate)
              .replaceAll('{{duedate}}', duedate);

            // 4) 라벨 결정 (Story/Bug 고정, Task는 Feature/Refactor/Documentation만 허용)
            const allowed = new Set(['Feature','Refactor','Documentation']);
            let labels = [];
            if (kind === 'story') labels = ['Story'];
            else if (kind === 'bug') labels = ['Bug'];
            else {
              let incoming = [];
              if (Array.isArray(p.labels)) incoming = p.labels;
              else if (typeof p.labels === 'string') incoming = p.labels.split(',').map(s=>s.trim()).filter(Boolean);
              labels = incoming.filter(v => allowed.has(v));
              if (labels.length === 0) labels = ['Task']; // 필요 없으면 제거
            }

            // 5) 이슈 생성 (인코딩/디코딩 없이 그대로)
            const title = `[${key}] ${summary}`;
            const res = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels
            });

            core.info(`Created issue #${res.data.number}`);
